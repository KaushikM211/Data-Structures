package ASSIGNMENT;
/*Interface for Queue ADT
 * BY:KAUSHIK.M (CB.EN.U4AIE19036)
 */
public interface Queue_ADT {
	public void enqueueFront(int data1);
	public void enqueueRear(int data2);
	public int dequeueFront();
	public int dequeueRear();
	public boolean isEmpty();
	public int Size();
	public void display();	 
}


package ASSIGNMENT;
/*CIRCULAR QUEUE IMPLEMENTATION
 * BY:KAUSHIK.M (CB.EN.U4AIE19036)
 */

public class DoubleCQueue_Array implements Queue_ADT{
	int[] queue;
	int front, rear;
	
	public DoubleCQueue_Array(int size) {
		queue = new int[size];
		front = rear = -1;
	}
	
	//Checking whether Circular Queue Array is Empty or not
	public boolean isEmpty() {
		return front < 0;
	}
	
	// Inserting from the front
	public void enqueueFront(int data) {
		if(isEmpty()) {
			front = rear = 0;
			queue[front] = data;			
		}
		else if((rear + 1) % queue.length == front){
			System.out.println("Overflow...Circular Queue is Full!");
		}
		else
		{	int[] queue1 = new int[queue.length];
			queue1[front] = data;
			int i;
			rear = (rear + 1)%queue.length;
			for(i = front; i!= rear ; i = (i + 1) % queue.length)
				queue1[(i + 1)%(queue.length)] = queue[i];
			queue = queue1;
		}
				
	}
	
	//Inserting at the end
	public void enqueueRear(int data) {
		if(isEmpty()) {
			front = rear = 0;
			queue[rear] = data;			
		}
		else if((rear + 1) % queue.length == front){
			System.out.println("Overflow...Circular Queue is Full!");
		}
		else
		{
			queue[rear = (rear + 1) % queue.length] = data;
		}
		
	}
	
	//Deleting the element from the front
	public int dequeueFront() {
		if(isEmpty()) {
			System.out.println("Underflow...Circular Queue Empty!");
			return -1;
		}
		else if(front == rear){
			int temp = queue[rear];
			front = rear = - 1;
			return temp;
		}
		else{
			int temp = queue[front];
			front = (front + 1) % queue.length;
			return temp;
		}
	}

	//Deleting the element from the end
	public int dequeueRear() {
		if(isEmpty()) {
			System.out.println("Underflow...Circular Queue Empty!");
			return -1;
		}
		else if(front == rear){
			int temp = queue[rear];
			front = rear = - 1;
			return temp;
		}
		else{
			int temp = queue[rear];
			rear = (Math.abs(queue.length + rear - 1)) % queue.length;
			return temp;
		}
	}
	
	//Displaying The Circular Array
	public void display() {
		if(isEmpty())
			return;
		int i = front;
		System.out.print(queue[i] + " ");
		do 
		{	i = (i + 1) % queue.length;
			System.out.print(queue[i] + " ");
		}while(i != rear);
		System.out.println();
	}
	
	public int Size() {
			return Math.abs(queue.length - front - rear);
	}
	
	//Test main
	public static void main(String[] args) {
		DoubleCQueue_Array q = new DoubleCQueue_Array(5);
		q.enqueueRear(10);
		q.enqueueRear(6);
		q.enqueueRear(5);
		System.out.println("Queue Array:");
		q.display();
		System.out.println("Size of Array:" + q.Size());
		System.out.println("Deleted element:" + q.dequeueFront());
		System.out.println("Queue Array:");
		q.display();
		q.enqueueFront(16);
		System.out.println("Inserting element from the front:");
		q.display();
		System.out.println("Deleted element from the end:" + q.dequeueRear());
		q.display();
		System.out.println("Size of Array:" + q.Size());
	}
}






	