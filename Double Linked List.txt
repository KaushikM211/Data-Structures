package ASSIGNMENT;
/*
 * This is the class for the double list
 */

public class Double_LinkedList implements DList {
		public class Node{
			int data;
			Node next;
			Node prev;

			public Node(int data) {
				this.data = data;
				next = null;
				prev = null;
			}

		};
		Node start = null,last = null;
		
	//Checking whether list is empty or not
	public boolean isEmpty() {
			return start == null;
		}

	//Retrieving the size of the list
	public int Size() {
		int i = 0;
		Node temp = start;
		while(temp != null) {
			temp = temp.next;
			i++;
		}
		return i;
	}
		
	//Inserting from last-right end
	@Override
	public void insertlast(int value1) {
		if(isEmpty()) {
			last = new Node(value1);
			start = last;
		}
		else
		{
			last.next = new Node(value1);
			Node temp = last;
			last = last.next;
			last.prev = temp;			
		}
		
	}

	//Inserting at a mid location given by user
	@Override
	public void insertmid(int value2, int index1) {
		int t = Size();
		if(index1 - 1 == 0) {
			insertfront(value2);
		}
		else if(index1 > t + 1) 
			System.out.println("The index is out of bound");
		else if(index1 == t + 1) {
			insertlast(value2);
		}
		else {
		Node point = start;
		int i = 0;
		while(i < index1 - 1) {
				point = point.next;
				i++ ;
			}
		point =  point.next;
		Node temp = new Node(value2);
		temp.next = point.next;
		point.next = temp;
		temp.prev = point;
		}
	}

	//Inserting from the front - left end
	@Override
	public void insertfront(int value3) {
		if(isEmpty()) {
			last = new Node(value3);
			start = last;
		}
		else {
			Node temp = new Node(value3);
			temp.next = start;
			start.prev = temp;
			start = temp;
		}
		
	}

	//Deleting from front - left side
	@Override
	public int deletefront() {
		if(isEmpty())
		{
			System.out.println("List is empty");
			return -1;
		}
		else {
			int temp = start.data;
			start = start.next;
			start.prev = null;
			return temp;
		}
	}

	//Deleting from last - right side
	@Override
	public int deletelast() {
		int temp = last.data;
		last = last.prev;
		last.next = null;
		return temp;
	}

	//Deleting from the mid index given by the user
	@Override
	public int deletemid(int index2) {
		if(isEmpty()) {
			System.out.println("List is empty");
			return -1;
		}
		else if(index2 - 1 == 0) {
			return deletefront();
		}
		else if (index2 == Size()) {
			return deletelast();
		}
		else if(index2 - 1 >= Size()){
			System.out.println("Index out of bound");
			return -1;
		}
		else {
			Node point = start;
			int i = 0;
			while(i < index2 - 1) {
				point = point.next;
				i++ ;
			}
			int temp = point.data;
			Node p = point;
			point = point.prev;
			point.next = p.next;
			p.prev = point;
			return temp;
			
		}
	}
	
	//Displaying the list
	@Override
	public void display() {
		Node point = start;
		while(point != null) {
			System.out.print(point.data + " ");
			point = point.next;
		}
		System.out.println();
	}
	
	//Test Main
	public static void main(String[] args) {
		DList d = new Double_LinkedList();
		d.insertlast(10);
		d.insertlast(6);
		System.out.print("List : ");
		d.display();
		System.out.println("Deleted element from last : " + d.deletelast());
		System.out.print("List : ");
		d.display();
		d.insertfront(16);
		d.insertfront(-7);
		d.insertlast(5);
		d.insertmid(1, 2);
		System.out.print("List : ");
		d.display();
		System.out.println("Deleted element from front : " + d.deletefront());
		d.display();
		System.out.println("Deleted element  at location 3 : " + d.deletemid(3));
		d.display();
	}

}
	


